<?php/*** Permite Gestionar los socios del club** @author Giuici Francisco* @version 1.0* @package sicat* @subpackage socios*//*** Formulario que gestionar socios*/function socio_form($form, &$form_state){	$form['#attached']['css'] = array(		drupal_get_path('module', 'socios') . '/css/socios.css',	);	$form['#attached']['js'] = array(		drupal_get_path('module', 'socios') . '/js/socios.js',	);	//buscamos los roles del usuario logueado  	$roles = get_roles_usuario_logueado();	if(strpos($_SERVER['HTTP_REFERER'], 'datos_socio'))	{		$array_retorno = parse_url($_SERVER['HTTP_REFERER']);		$_SESSION['retorno'] = 'socios/datos_socio';    		$_SESSION['retorno_params'] =array('query' =>get_params_url($_SERVER['HTTP_REFERER']));	}	else if(strpos($_SERVER['HTTP_REFERER'], 'gestionar_socios'))	{		$array_retorno = parse_url($_SERVER['HTTP_REFERER']);		$_SESSION['retorno'] = 'socios/gestionar_socios';    	}	else{		$_SESSION['retorno'] = ''; 	}  	  	$socio=null;  	$disabled = false;	//recuperamos los parametros	if(isset($_GET['id']))	{		$id_socio = $_GET['id'];		$form['id_socio'] = array(		  '#type' => 'hidden', 		  '#value' => $id_socio,		);		$socio = get_socio_por_id($id_socio);			//si es miembro de familia tiene que tener el numero de socio de su titular		if($socio->tipo_socio_id == 2)		{			$grupo_familiar = get_grupo_familiar($socio->id_socio);			$socio->nro_socio = $grupo_familiar->nro_socio_titular;		}		}	$opciones_localidades = array();	if(isset($socio->id_provincia))	{    		//si la persona tiene sus datos de localidad provincia pais		$opciones_localidades = get_localidades_select($socio->id_provincia);		//drupal_set_message('<pre>'.print_r($opciones_provincia, true).'</pre>');	}	//$num_socio_completo = $socio->nro_socio.'/'.$socio->secuencia;	$form['num_socio'] = array(		'#title' => t('NUMERO DE SOCIO'),	    '#type' => 'textfield', 	    '#default_value'=>((empty($socio->nro_socio)||is_null($socio->nro_socio)) ? '':$socio->nro_socio),	    '#disabled'=>true,	    '#required'=>true,	);	if(isset($socio->secuencia))		$form['secuencia'] = array(			  '#type' => 'hidden', 			  '#value' => $socio->secuencia,		);	if(isset($socio->id_persona))		$form['id_persona'] = array(		  '#type' => 'hidden', 		  '#value' => $socio->id_persona,		);	//si es un socio nuevo se permite generar la cuota inscripcion		$form['cuota_inscripcion'] = array(		'#title' => t('GENERAR CUOTA INSCRIPCIÓN'),		'#type' => 'checkbox', 				);	$form['socio'] = array(		'#type' => 'vertical_tabs', 	);	$form['socio']['socio_datos_personales'] = array(		'#title' => t('DATOS PERSONALES'),		'#type' => 'fieldset', 	);	$form['socio']['socio_datos_personales']['tipo_doc'] = array(		'#title' => t('TIPO DE DOCUMENTO'),	    '#type' => 'select', 	    '#options' => array('DNI'=>'DNI','LC'=>'LC','LE'=>'LE','DNI EXT.'=>'DNI EXT.'),	    '#default_value'=>((empty($socio->tipo_doc)||is_null($socio->tipo_doc)) ? '':$socio->tipo_doc),	    '#disabled'=>$disabled,	    '#required'=>true,	);	$form['socio']['socio_datos_personales']['nro_doc'] = array(		'#title' => t('NUMERO DE DOCUMENTO'),	    '#type' => 'textfield', 	    '#default_value'=>((empty($socio->nro_doc)||is_null($socio->nro_doc)) ? '':$socio->nro_doc),	    '#disabled'=>$disabled,	    '#required'=>true,	);	$form['socio']['socio_datos_personales']['apellido'] = array(		'#title' => t('APELLIDO'),	    '#type' => 'textfield', 	    '#default_value'=>((empty($socio->apellidos)||is_null($socio->apellidos)) ? '':$socio->apellidos),	    '#disabled'=>$disabled,	    '#required'=>true,	);	$form['socio']['socio_datos_personales']['nombres'] = array(		'#title' => t('NOMBRES'),	    '#type' => 'textfield',	    '#default_value'=>((empty($socio->nombres)||is_null($socio->nombres)) ? '':$socio->nombres), 	    	    '#disabled'=>$disabled,	    '#required'=>true,	);		      	$form['socio']['socio_datos_personales']['fecha_nac'] = array(	    '#type'=>'date',	    '#title'=>t('FECHA DE NACIMIENTO'),	    	    '#disabled'=>$disabled,	    '#required'=>true,      	);  	//fecha de nacimiento	if(!empty($socio->fecha_nac)&&!is_null($socio->fecha_nac))	{				$fecha_nac_anio = substr($socio->fecha_nac,6,4);		$fecha_nac_mes = substr($socio->fecha_nac,3,2);		$fecha_nac_dia = substr($socio->fecha_nac,0,2);		$fecha_nac_default = array('year'=>intval($fecha_nac_anio), 'month'=>intval($fecha_nac_mes), 'day'=>intval($fecha_nac_dia));			$form['socio']['socio_datos_personales']['fecha_nac']['#default_value'] = $fecha_nac_default; 	}  	$form['socio']['socio_datos_personales']['sexo'] = array(		'#title' => t('SEXO'),	    '#type' => 'select',	    '#options' => array('MASCULINO'=>'MASCULINO','FEMENINO'=>'FEMENINO'), 	    '#default_value'=>((empty($socio->sexo)||is_null($socio->sexo)) ? '':$socio->sexo),	    '#disabled'=>$disabled,	    '#required'=>true,	);	$form['socio']['socio_datos_personales']['direccion'] = array(		'#title' => t('DIRECCIÓN'),	    '#type' => 'textfield',	    '#default_value'=>((empty($socio->direccion)||is_null($socio->direccion)) ? '':$socio->direccion),	    '#disabled'=>$disabled,	    '#required'=>true,	);	$opciones_provincia = get_provincias_select();	 $form['socio']['socio_datos_personales']['provincia'] = array(    '#type'=>'select',    '#title'=>t('PROVINCIA'),    '#options'=>$opciones_provincia,        '#required'=>TRUE,    '#default_value'=>((empty($socio->id_provincia)||is_null($socio->id_provincia)) ? '6':$socio->id_provincia),    '#prefix' => '<div id="select-provincia">',    '#suffix'=>'</div>',    '#ajax' => array(             'wrapper' => 'select-localidad',      'callback' => 'localidad_ajax_callback',      'method' => 'replace',    ),  );  $opciones_localidades = get_localidades_select(6);  $form['socio']['socio_datos_personales']['localidad'] = array(    '#title' => t('LOCALIDAD'),	    '#type' => 'select',	    '#options' =>$opciones_localidades, 	    '#default_value'=>((empty($socio->id_localidad)||is_null($socio->id_localidad)) ? '1':$socio->id_localidad),    '#prefix' => '<div id="select-localidad">',    '#suffix'=>'</div>',  );  if(isset($form_state['values']['provincia']))  {     	//drupal_set_message($form_state['values']['provincia']);    $form['socio']['socio_datos_personales']['localidad']['#options']=get_localidades_select($form_state['values']['provincia']);    $form['socio']['socio_datos_personales']['localidad']['#disabled']=0;  }  //vemos si tiene telefono fijo con prefijo o sin prefijo  if(isset($socio->telefono_fijo) && strpos($socio->telefono_fijo, "-"))  {  	$array_tel_fijo = explode("-", $socio->telefono_fijo);  	$prefijo_telefono_fijo =  $array_tel_fijo[0];  	$num_telefono_fijo = $array_tel_fijo[1];  }  else if(isset($socio->telefono_fijo))  {  	$prefijo_telefono_fijo = null;  	$num_telefono_fijo = $socio->telefono_fijo;	  }  else  {  	$prefijo_telefono_fijo = null;  	$num_telefono_fijo = null;  }	//el telefono fijo se conforma con dos campos prefijo_telefono_fijo + telefono_fijo	//solo el campo prefijo_telefono_fijo tiene el titulo	$form['socio']['socio_datos_personales']['prefijo_telefono_fijo'] = array(		'#title' => t('TELÉFONO FIJO'),		'#type' => 'textfield',		'#size'=>4,		'#prefix' => '<div id="telefono_fijo">',		'#attributes' => array('placeholder' => array(t('343'))),		'#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>$prefijo_telefono_fijo,	);	$form['socio']['socio_datos_personales']['telefono_fijo'] = array(        '#type' => 'textfield',        '#default_value'=>null,        '#size'=>8,        '#attributes' => array('placeholder' => array(t('4123456'))),        '#suffix'=>'</div>',		'#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>$num_telefono_fijo,     );	//vemos si tiene telefono fijo con prefijo o sin prefijo	if(isset($socio->celular_1) && strpos($socio->celular_1, "-"))	{	$array_celular_1 = explode("-", $socio->celular_1);	$prefijo_celular_1 =  $array_celular_1[0];	$num_celular_1 = $array_celular_1[1];	}	else if(isset($socio->celular_1))	{	$prefijo_celular_1 = null;	$num_celular_1 = $socio->celular_1;		}	else	{	$prefijo_celular_1 = null;	$num_celular_1 = null;	}	//el telefono fijo se conforma con dos campos prefijo_celular_1 + numero_celular_1	//solo el campo prefijo_celular_1 tiene el titulo	$form['socio']['socio_datos_personales']['prefijo_celular_1'] = array(        '#title' => t('CELULAR PRINCIPAL'),        '#type' => 'textfield',        '#attributes' => array('placeholder' => array(t('343'))),        '#field_prefix' => t('0'),        '#size'=>4,        '#prefix' => '<div id="telefono-celular-1">',        '#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>$prefijo_celular_1,     );	$form['socio']['socio_datos_personales']['numero_celular_1'] = array(		'#type' => 'textfield',		'#attributes' => array('placeholder' => array(t('4123456'))),		'#field_prefix' => t('15'),		'#size'=>8,		'#suffix'=>'</div>',		'#required'=>false,		'#default_value'=>$num_celular_1,	);	$form['socio']['socio_datos_personales']['comp_cel_1'] = array(		'#title' => t('COMPAÑIA'),	    '#type' => 'select',	    '#options'=>array(NULL=>'-Seleccionar-','MOVISTAR'=>'MOVISTAR','PERSONAL'=>'PERSONAL','CLARO'=>'CLARO','TUENTI'=>'TUENTI'), 	    '#default_value'=>((empty($socio->comp_cel_1)||is_null($socio->comp_cel_1)) ? '':$socio->comp_cel_1),	    '#disabled'=>$disabled,	    '#required'=>false,	);	//vemos si tiene telefono celular alternativo con prefijo o sin prefijo	if(isset($socio->celular_2) && strpos($socio->celular_2, "-"))	{	$array_celular_2 = explode("-", $socio->celular_2);	$prefijo_celular_2 =  $array_celular_2[0];	$num_celular_2 = $array_celular_2[1];	}	else if(isset($socio->celular_2))	{	$prefijo_celular_2 = null;	$num_celular_2 = $socio->celular_2;		}	else	{	$prefijo_celular_2 = null;	$num_celular_2 = null;	}	//el telefono fijo se conforma con dos campos prefijo_celular_2 + numero_celular_2	//solo el campo prefijo_celular_2 tiene el titulo	$form['socio']['socio_datos_personales']['prefijo_celular_2'] = array(        '#title' => t('CELULAR ALTERNATIVO'),        '#type' => 'textfield',        '#attributes' => array('placeholder' => array(t('343'))),        '#field_prefix' => t('0'),        '#size'=>4,        '#prefix' => '<div id="telefono-celular-2">',        '#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>$prefijo_celular_2,     );	$form['socio']['socio_datos_personales']['numero_celular_2'] = array(		'#type' => 'textfield',		'#attributes' => array('placeholder' => array(t('4123456'))),		'#field_prefix' => t('15'),		'#size'=>8,		'#suffix'=>'</div>',		'#required'=>false,		'#default_value'=>$num_celular_2,	);	$form['socio']['socio_datos_personales']['comp_cel_2'] = array(		'#title' => t('COMPAÑIA'),	    '#type' => 'select',	    '#options'=>array(NULL=>'-Seleccionar-','MOVISTAR'=>'MOVISTAR','PERSONAL'=>'PERSONAL','CLARO'=>'CLARO','TUENTI'=>'TUENT'), 	    '#default_value'=>((empty($socio->comp_cel_2)||is_null($socio->comp_cel_2)) ? '':$socio->comp_cel_2),	    '#disabled'=>$disabled,	    '#required'=>false,	);	$form['socio']['socio_datos_personales']['email'] = array(		'#type' => 'emailfield',		'#placeholder' => t('nombre@dominio.com'),		'#title' => t('EMAIL'),	    '#default_value'=>((empty($socio->email)||is_null($socio->email)) ? '':$socio->email),	    '#disabled'=>$disabled,	    '#required'=>false,	);	/*----------- DATOS SOCIETARIOS -----------*/	$form['socio']['socio_datos_societarios'] = array(		'#title' => t('DATOS SOCIETARIOS'),		'#type' => 'fieldset', 	);		$form['socio']['socio_datos_societarios']['fecha_ingreso'] = array(	    '#type'=>'date',	    '#title'=>t('FECHA DE INGRESO'), 	    '#disabled'=>(isset($id_socio) ? TRUE : FALSE),	    '#required'=>true,      	);  	//fecha de nacimiento	if(!empty($socio->fecha_ingreso)&&!is_null($socio->fecha_ingreso))	{				$fecha_ingreso_anio = substr($socio->fecha_ingreso,6,4);		$fecha_ingreso_mes = substr($socio->fecha_ingreso,3,2);		$fecha_ingreso_dia = substr($socio->fecha_ingreso,0,2);		$fecha_ingreso_default = array('year'=>intval($fecha_ingreso_anio), 'month'=>intval($fecha_ingreso_mes), 'day'=>intval($fecha_ingreso_dia));			$form['socio']['socio_datos_societarios']['fecha_ingreso']['#default_value'] = $fecha_ingreso_default; 	}	//buscamos los tipos de socio	$tipos_socio = get_tipos_socio_select();	//vemos si el socio tiene un tipo de socio que tiene el socio cuando antes de guardar	if(!empty($socio->tipo_socio_id)&&!is_null($socio->tipo_socio_id))	{		$form['tipo_socio_anterior'] = array(		  '#type' => 'hidden', 		  '#value' => $socio->tipo_socio_id,		);	}	$form['socio']['socio_datos_societarios']['tipo_socio'] = array(		'#title' => t('TIPO DE SOCIO'),		'#type' => 'select', 		'#options'=>$tipos_socio,		'#disabled'=>$disabled,	    '#required'=>true,	    '#default_value'=>((empty($socio->tipo_socio_id)||is_null($socio->tipo_socio_id)) ? '' : $socio->tipo_socio_id),	);	//si es titular de familia y tiene vinculado adherentes no se puede modifiar	if(isset($socio->tipo_socio_id) && $socio->tipo_socio_id == 3)	{				//busamos el grupo familiar del socio		$grupo_familiar = get_socios_grupo_familiar($socio->id_socio);				//se deshabilita el campo si tene adherentes		if(count($grupo_familiar) >= 2)			$form['socio']['socio_datos_societarios']['tipo_socio']['#disabled'] = true;		//solo dejamos en grupo_familiar los datos del titular que es el key=0		$grupo_familiar = $grupo_familiar[0];		//ademas guardamos el tipo de grupo familiar que tiene hasta el momento para saber si cambio		$form['grupo_familiar_anterior'] = array(			'#value' => $grupo_familiar->tipo_grupo_familiar_id,			'#type' => 'hidden', 					);	}	/*----BUSCADOR DE SOCIO AUTOCOMPLETE NO SE USA PORQUE NO TENEMOS FORMA DE VINCUALR EL DATO SELECCIONADO CON EL ID DEL SOCIO SELECCIONADO	$form['socio']['socio_datos_societarios']['titular'] = array(		'#title' => t('TITULAR'),		'#type' => 'textfield', 		'#autocomplete_path'=>'titular/autocomplete',		'#states'=>array(	    	'visible'=>array(':input[name="tipo_socio"]' => array('value' => 2))	    	),	);*/	$titulares_familiares = titular_autocomplete();	$form['socio']['socio_datos_societarios']['titular'] = array(		'#title' => t('TITULAR'),		'#type' => 'select', 		'#options'=>$titulares_familiares,				'#states'=>array(	    	'visible'=>array(':input[name="tipo_socio"]' => array('value' => 2))	    	),	);	//si el socio es miembro de familia buscamos el id de su titular	if(isset($socio->tipo_socio_id) && $socio->tipo_socio_id == 2)	{				//busamos el grupo familiar del socio		$grupo_familiar = get_socio_grupo_familiar($socio->id_socio);			//drupal_set_message('<pre>'.print_r($grupo_familiar, true).'</pre>');		$socio_titular = get_socio_por_nro_socio($grupo_familiar->nro_socio_titular);		//se deshabilita el campo si tene adherentes		$form['socio']['socio_datos_societarios']['titular']['#default_value'] = $socio_titular->id_socio;		$form['titular_anterior'] = array(			'#type'=>'hidden',			'#value'=>$socio_titular->id_socio		);	}	$tipos_gf = get_tipos_grupo_familiar_select();	$form['socio']['socio_datos_societarios']['tipo_grupo_familiar'] = array(		'#title' => t('TIPO GRUPO FAMILIAR'),		'#type' => 'select',				'#options'=>$tipos_gf,		'#default_value'=>((empty($grupo_familiar->tipo_grupo_familiar_id)||is_null($grupo_familiar->tipo_grupo_familiar_id)) ? '' : $grupo_familiar->tipo_grupo_familiar_id),		'#states'=>array(	    	'visible'=>array(':input[name="tipo_socio"]' => array('value' => 3))	    	),	);	$relaciones_parentezco = get_parentezco_select();	$form['socio']['socio_datos_societarios']['parentezco'] = array(		'#title' => t('PARENTEZCO CON EL TITULAR'),		'#type' => 'select', 		'#options'=>$relaciones_parentezco,		'#default_value'=>((empty($grupo_familiar->parentezco)||is_null($grupo_familiar->parentezco)) ? '' : $grupo_familiar->parentezco),		'#states'=>array(	    	'visible'=>array(':input[name="tipo_socio"]' => array('value' => 2))	    		    	),	);	//buscamos los estados del socio	$estados_socio = get_estados_socio_select();	$form['socio']['socio_datos_societarios']['estado'] = array(		'#title' => t('ESTADO'),		'#type' => 'select', 		'#options'=>$estados_socio,		'#disabled'=>$disabled,	    '#required'=>true,	    '#default_value'=>((empty($socio->estado_socio_id)||is_null($socio->estado_socio_id)) ? '' : $socio->estado_socio_id),	);	//guardamos el estado anterior del socio si esta seteado y no es vacio	if(isset($socio->estado_socio_id))	{		$form['estado_socio_anterior'] = array(		  '#type' => 'hidden', 		  '#value' => $socio->estado_socio_id,		);	}	//buscamos las categorias	$categorias_socio = get_categorias_socio_select();	$form['socio']['socio_datos_societarios']['categoria'] = array(		'#title' => t('CATEGORIA'),		'#type' => 'select', 		'#options'=>$categorias_socio,		'#disabled'=>$disabled,	    '#required'=>true,	    '#default_value'=>((empty($socio->categoria_socio_id)||is_null($socio->categoria_socio_id)) ? '' : $socio->categoria_socio_id),	);	//buscamos los tipos de socio	$forma_pago = get_formas_pago_select();	$form['socio']['socio_datos_societarios']['forma_pago'] = array(		'#title' => t('FORMA DE PAGO'),		'#type' => 'select', 		'#options'=>$forma_pago,		'#disabled'=>$disabled,	    '#required'=>true,	    '#default_value'=>((empty($socio->forma_pago_id)||is_null($socio->forma_pago_id)) ? '' : $socio->forma_pago_id),	    '#states'=>array(	    	'invisible'=>array(':input[name="tipo_socio"]' => array('value' => 2))    	),	);	$form['socio']['socio_datos_societarios']['cbu'] = array(		'#title' => t('CBU'),		'#type' => 'textfield', 		'#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>((empty($socio->cbu)||is_null($socio->cbu)) ? '' : $socio->cbu),	    '#states'=>array(	    	'visible'=>array(':input[name="forma_pago"]' => array('value' => 2))	    	),	);	$form['socio']['socio_datos_societarios']['vencimiento_1'] = array(		'#title' => t('Primera fecha limite'),		'#type' => 'textfield', 		'#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>((empty($socio->vencimiento_dia)||is_null($socio->vencimiento_dia)) ? null : $socio->vencimiento_dia),	    '#states'=>array(	    	'visible'=>array(':input[name="forma_pago"]' => array('value' => 2))	    	),	);	$form['socio']['socio_datos_societarios']['vencimiento_2'] = array(		'#title' => t('Segunda fecha Limite'),		'#type' => 'textfield', 		'#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>((empty($socio->vencimiento_mes)||is_null($socio->vencimiento_mes)) ? null : $socio->vencimiento_mes),	    '#states'=>array(	    	'visible'=>array(':input[name="forma_pago"]' => array('value' => 2))	    	),	);	$cobradores = get_cobradores_select();	$form['socio']['socio_datos_societarios']['personal'] = array(		'#title' => t('COBRADOR'),		'#type' => 'select', 		'#options'=>$cobradores,		'#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>((empty($socio->personal_id)||is_null($socio->personal_id)) ? '' : $socio->personal_id),	    '#states'=>array(	    	'visible'=>array(	    					array(':input[name="forma_pago"]' => array('value' => 1)),							array(		    					 array(':input[name="tipo_socio"]' => array('value' => 3)), 'xor',		    					 array(':input[name="tipo_socio"]' => array('value' => 1))		    					 )		    				),	    			)//este states se usa para solo dejar visible el personal si el tipo de socio es SOCIO UNICO (1) O TITULAR DE FAMILIA(3) teniendo en cuenta que la forma de pago se por cobrador (1)	);	$form['socio']['socio_datos_societarios']['lugar_cobro'] = array(		'#title' => t('LUGAR DE COBRO'),		'#type' => 'textfield', 		'#disabled'=>$disabled,	    '#required'=>false,	    '#default_value'=>((empty($socio->lugar_cobro)||is_null($socio->lugar_cobro)) ? null : $socio->lugar_cobro),		'#states'=>array(	    	'visible'=>array(						array(':input[name="forma_pago"]' => array('value' => 1)),						array(	    					 array(':input[name="tipo_socio"]' => array('value' => 3)), 'xor',	    					 array(':input[name="tipo_socio"]' => array('value' => 1))	    					 )	    				),	    			)//este states se usa para solo dejar visible el lugar de cobro si el tipo de socio es SOCIO UNICO (1) O TITULAR DE FAMILIA(3) teniendo en cuenta que la forma de pago se por cobrador (1) 	);		/*------------------------------------------------*/	/*$form['socio']['socio_actividades'] = array(		'#title' => t('ACTIVIDADES'),		'#type' => 'fieldset', 	);	$form['socio']['socio_actividades']['lista_actividaes_socio'] = array(		'#title' => t('ACTIVIADES'),	    '#type' => 'textfield', 	    '#default_value'=>t(''),	    '#disabled'=>$disabled	);*/	$form['guardar'] = array(		'#type'=>'submit',		'#value'=> t('GUARDAR'),	);	$form['salir'] = array(		'#type'=>'submit',		'#value'=> t('CANCELAR'),		'#limit_validation_errors'=> array(),		'#submit'=> array('socio_volver_submit'),		'#attributes' => array('onclick' => 'if(!confirm("¿Está seguro que desea salir?")){return false;}'),	);	return $form;}function socio_volver_submit($form, &$form_state){	$retorno = array($_SESSION['retorno']);      unset($_SESSION['retorno']);  if(isset($_SESSION['retorno_params']))  {    array_push($retorno, $_SESSION['retorno_params']);    unset($_SESSION['retorno_params']);  }  //drupal_set_message('<pre>'.print_r($retorno, true).'</pre>');  $form_state['redirect'] = $retorno;}function socio_form_validate($form, &$form_state){	//si no es un socio existente se valida el dni	if(!isset($form_state['values']['num_socio']))	{		//validar si el dni no existe ya		$socio = get_socio_por_tipo_nro_doc($form_state['values']['tipo_doc'], $form_state['values']['nro_doc']);		if(!is_null($socio) && !empty($socio))		{			form_set_error('tipo_doc', 'YA EXISTE UN SOCIO CON ESTE TIPO Y NUMERO DE DOCUMENTO<br>										<strong>APELLIDO Y NOMBRE: </strong> '.$socio->apellidos.' '.$socio->nombres);				form_set_error('nro_doc', '');	 		}		}		if(preg_match('/[0-9]/', $form_state['values']['apellido'])){          form_set_error('apellido', 'El campo APELLIDO es incorrecto - No puede contener numeros.');    }    if(preg_match('/[0-9]/', $form_state['values']['nombres'])){          form_set_error('nombres', 'El campo NOMBRE es incorrecto - No puede contener numeros.');    }    if(!is_numeric($form_state['values']['nro_doc'])){      form_set_error('nro_doc', 'El campo NUMERO DE DOCUMENTO es incorrecto - Solo puede contener números');    }    if(($form_state['values']['nro_doc'])<99999){      form_set_error('nro_doc', 'El campo NUMERO DE DOCUMENTO es incorrecto - Ingrese un DNI valido');    }	if(isset($form_state['values']['prefijo_telefono_fijo']) && preg_match('/[a-zA-Z]/', $form_state['values']['prefijo_telefono_fijo'])) 		form_set_error('prefijo_telefono_fijo', 'El campo TELEFONO FIJO es incorrecto - No puede contener letras.');	if(isset($form_state['values']['prefijo_telefono_fijo']))	{		$longitud_prefijo  = strlen($form_state['values']['prefijo_telefono_fijo']);		if($longitud_prefijo > 4){    		form_set_error('prefijo_telefono_fijo', 'El campo TELEFONO FIJO es incorrecto - El prefijo no puede contener mas de 4 digitos.');		}    		if($longitud_prefijo < 2 && $longitud_prefijo > 0)		{		form_set_error('prefijo_telefono_fijo', 'El campo TELEFONO FIJO es incorrecto - El prefijo no puede contener menos de 2 digitos.');		} 	}	if(isset($form_state['values']['telefono_fijo']) && preg_match('/[a-zA-Z]/', $form_state['values']['telefono_fijo']))       form_set_error('telefono_fijo', 'El campo TELEFONO FIJO es incorrecto - No puede contener letras.');	if(isset($form_state['values']['telefono_fijo']))	{		$longitud  = strlen($form_state['values']['telefono_fijo']);		if($longitud > 8)		{    			form_set_error('telefono_fijo', 'El campo TELEFONO FIJO incorrecto - El telefono FIJO no puede contener mas de 8 Digitos.');		}    		if($longitud < 6 && $longitud > 0)		{			form_set_error('telefono_fijo', 'El campo TELEFONO FIJO incorrecto - El telefono FIJO no puede contener menos de 6 digitos.');		} 	}	if((!empty(($form_state['values']['telefono_fijo']) && empty($form_state['values']['prefijo_telefono_fijo']))||	(empty($form_state['values']['telefono_fijo'])) && !empty($form_state['values']['prefijo_telefono_fijo']))	   )	 form_set_error('telefono_fijo', 'El campo TELEFONO FIJO incorrecto - El telefono FIJO debe contener prefijo y numero.');	if(isset($form_state['values']['prefijo_celular_1']))	{		$longitud  = strlen($form_state['values']['prefijo_celular_1']);		if($longitud > 4){    		form_set_error('prefijo_celular_1', 'El campo TELEFONO CELULAR es incorrecto - El prefijo no puede contener mas de 4 digitos.');		}    		if($longitud < 2 && $longitud > 0)		{		form_set_error('prefijo_celular_1', 'El campo TELEFONO CELULAR es incorrecto - El prefijo no puede contener menos de 2 digitos.');		} 	}	if(isset($form_state['values']['numero_celular_1']))	{		$longitud  = strlen($form_state['values']['numero_celular_1']);		if($longitud > 9){    		form_set_error('numero_celular_1', 'El campo TELEFONO CELULAR es incorrecto - El telefono celular no puede contener mas de 9 digitos.');		}    		if($longitud < 6 && $longitud > 0)		{		form_set_error('numero_celular_1', 'El campo TELEFONO CELULAR es incorrecto - El telefono celular no puede contener menos de 6 digitos.');		} 	}	if((!empty(($form_state['values']['numero_celular_1']) && empty($form_state['values']['prefijo_celular_1']))||	(empty($form_state['values']['numero_celular_1'])) && !empty($form_state['values']['prefijo_celular_1']))	   )		form_set_error('numero_celular_1', 'El campo TELEFONO CELULAR es incorrecto - El telefono celular debe contener prefijo y numero.');  	if(isset($form_state['values']['prefijo_celular_2']))	{		$longitud  = strlen($form_state['values']['prefijo_celular_2']);		if($longitud > 4){    		form_set_error('prefijo_celular_2', 'El campo TELEFONO CELULAR es incorrecto - El prefijo no puede contener mas de 4 digitos.');		}    		if($longitud < 2 && $longitud > 0)		{		form_set_error('prefijo_celular_2', 'El campo TELEFONO CELULAR es incorrecto - El prefijo no puede contener menos de 2 digitos.');		} 	}	if(isset($form_state['values']['numero_celular_2']))	{		$longitud  = strlen($form_state['values']['numero_celular_2']);		if($longitud > 9){    		form_set_error('numero_celular_2', 'El campo TELEFONO CELULAR es incorrecto - El telefono celular no puede contener mas de 9 digitos.');		}    		if($longitud < 6 && $longitud > 0)		{		form_set_error('numero_celular_2', 'El campo TELEFONO CELULAR es incorrecto - El telefono celular no puede contener menos de 6 digitos.');		} 	}	if((!empty(($form_state['values']['numero_celular_2']) && empty($form_state['values']['prefijo_celular_2']))||	(empty($form_state['values']['numero_celular_2'])) && !empty($form_state['values']['prefijo_celular_2']))	   )		form_set_error('numero_celular_2', 'El campo TELEFONO CELULAR es incorrecto - El telefono celular debe contener prefijo y numero.'); 		//validar la fecha de nacimiento no sea mayor a la corriente	$hoy = new DateTime("now");	$fecha_nac_temp=$form_state['values']['fecha_nac'];    $fecha_nac=$fecha_nac_temp['year'].'-'.$fecha_nac_temp['month'].'-'.$fecha_nac_temp['day'];    $fecha_nac = new DateTime($fecha_nac);    if($hoy < $fecha_nac)    	form_set_error('fecha_nac', 'El campo FECHA DE NACIMIENTO es incorrecto - La fecha seleccionada es mayor a la fecha actual'); 	//validar si la categoria es la correcta si el socio es tipo socio unico	if($form_state['values']['tipo_socio'] == 1)	{		$fecha_nac_temp=$form_state['values']['fecha_nac'];	    $fecha_nac=$fecha_nac_temp['year'].'-'.$fecha_nac_temp['month'].'-'.$fecha_nac_temp['day'];	    $fecha_nac = explode("-", $fecha_nac);	  	//get age from date or birthdate	 	$curMonth = date("m");	    $curDay = date("j");	    $curYear = date("Y");	    $edad = $curYear - $fecha_nac[0]; 	    if($curMonth<$fecha_nac[1] || ($curMonth==$fecha_nac[1] && $curDay<$fecha_nac[2])) 	            $edad--; 		if(validar_categoria($edad, $form_state['values']['categoria']))		{			form_set_error('categoria', 'La CATEGORIA seleccionada es incorrecta. La categoria seleccionada no es la correspondiente para la edad del socio <strong>('.$edad.' AÑOS)</strong>'); 		}	}	//validar si se puede dar de baja si el socio no es un socio nuevo	if(isset($form_state['values']['id_socio']))	{		//se permite que un socio se de de baja solo si no tiene deuda		//buscamos el estado seleccionado		$estado = $form_state['values']['estado'];		//buscamos el estado anterior		$estado_anterior = $form_state['values']['estado_socio_anterior'];		//buscamos si el tipo de estado es baja o no 		$tipo_estado = get_tipo_estado($estado);		$tipo_estado_anterior = get_tipo_estado($estado_anterior);		//si el tipo de estado cambio respecto del anterior quiere decir que el socio paso de un estado de tipo alta/baja o un estado de tipo baja/alta		if($tipo_estado != $tipo_estado_anterior)		{			//revisamos si el socio tiene deuda			$deuda_socio = consultar_deuda($form_state['values']['id_socio']);						if(!is_null($deuda_socio) && $tipo_estado == 0)			{				$mensaje = 'NO SE PUEDE CAMBIAR EL ESTADO DEL SOCIO YA QUE EL SOCIO ADEUDA CUOTA SOCIAL.</br>							ESTADO DE DEUDA:</br>							<TABLE BORDER="1" CELLPADDING="1" CELLSPACING="1" STYLE="WIDTH:800PX">							<TBODY>								<TR>									<TD STYLE="WIDTH: 198PX;"><STRONG>CONCEPTO</STRONG></TD>									<TD STYLE="WIDTH: 214PX;"><STRONG>FECHA DE EMISION</STRONG></TD>									<TD STYLE="WIDTH: 186PX;"><STRONG>MES</STRONG></TD>									<TD STYLE="WIDTH: 182PX;"><STRONG>AÑO</STRONG></TD>								</TR>';				foreach($deuda_socio as $concepto)				{					$mensaje = $mensaje.'<TR>											<TD STYLE="WIDTH: 198PX;">'.$concepto->nombre.'</TD>											<TD STYLE="WIDTH: 214PX;">'.$concepto->fecha_emision.'</TD>											<TD STYLE="WIDTH: 186PX;">'.$concepto->mes.'</TD>											<TD STYLE="WIDTH: 182PX;">'.$concepto->anio.'</TD>										</TR>';				}						$mensaje=$mensaje.'</TBODY>								</TABLE>';				form_set_error('estado', $mensaje); 			}		}		}		}function socio_form_submit($form, &$form_state){	//recuperamos todos los valores de los campos del formulario	//datos personales 	$tipo_doc = $form_state['values']['tipo_doc'];	$nro_doc = $form_state['values']['nro_doc'];	$apellidos = $form_state['values']['apellido'];	$nombres = $form_state['values']['nombres'];	$sexo = $form_state['values']['sexo'];	$direccion = $form_state['values']['direccion'];	$localidad_id = $form_state['values']['localidad'];	$prefijo_telefono_fijo = $form_state['values']['prefijo_telefono_fijo'];	$telefono_fijo = $form_state['values']['telefono_fijo'];	$prefijo_celular_1 = $form_state['values']['prefijo_celular_1'];	$numero_celular_1 = $form_state['values']['numero_celular_1'];	$prefijo_celular_2 = $form_state['values']['prefijo_celular_2'];	$numero_celular_2 = $form_state['values']['numero_celular_2'];	$comp_cel_1 = $form_state['values']['comp_cel_1'];	$comp_cel_2 = $form_state['values']['comp_cel_2'];	$celular_1 = (!empty($prefijo_celular_1) ? $prefijo_celular_1.'-'.$numero_celular_1 : null);	$celular_2 = (!empty($prefijo_celular_2) ? $prefijo_celular_2.'-'.$numero_celular_2 : null);	$email = $form_state['values']['email'];	//datos del socio	$tipo_socio = $form_state['values']['tipo_socio'];	$estado = $form_state['values']['estado'];	//buscamos si el tipo de estado es baja o no 	$tipo_estado = get_tipo_estado($estado);		$categoria = $form_state['values']['categoria'];	$tipo_grupo_familiar = $form_state['values']['tipo_grupo_familiar'];	$parentezco = $form_state['values']['parentezco'];	//pago	$forma_pago = $form_state['values']['forma_pago'];	//si la forma de pago es COBRADOR(1) se debe dar a cbu, vencimiento_1 y vencimiento_2 el valor null	if($forma_pago == 1) 	{		$cbu = null;		$vencimiento_1 = null;		$vencimiento_2 = null;		$personal = $form_state['values']['personal'];		$lugar_cobro = $form_state['values']['lugar_cobro'];	}//si la forma de pago es DEBITO AUTOMATICO (2) se debe dar a personal, lugar_cobro	else if($forma_pago == 2)	{		$cbu = $form_state['values']['cbu'];		$vencimiento_1 = ((empty($form_state['values']['vencimiento_1'])) ? null : $form_state['values']['vencimiento_1']);		$vencimiento_2 = ((empty($form_state['values']['vencimiento_2'])) ? null : $form_state['values']['vencimiento_2']);		$personal = null;		$lugar_cobro = null;	}//si la forma de pago es MOSTRADOR(3), el id del personal vinculado es 3	//que corresponde al club  	else if($forma_pago == 3)	{		$cbu = null;		$vencimiento_1 = null;		$vencimiento_2 = null;		$personal =3;		$lugar_cobro = null;	}		$fecha_nac_temp=$form_state['values']['fecha_nac'];    $fecha_nac=$fecha_nac_temp['year'].'-'.$fecha_nac_temp['month'].'-'.$fecha_nac_temp['day'];    $fecha_ingreso_temp=$form_state['values']['fecha_ingreso'];    $fecha_ingreso=$fecha_ingreso_temp['year'].'-'.$fecha_ingreso_temp['month'].'-'.$fecha_ingreso_temp['day'];	//drupal_set_message('<pre>'.print_r('socio titular = '.$form_state['values']['titular'],true).'</pre>');	$pago_nulo = false;	//si el tipo de socio es miembro de familia se le pegara en todo lo relacionado al pago null	if($tipo_socio == 2)	{		$pago_nulo = true;	}	$uid = $GLOBALS['user']->uid;		$transaction = db_transaction();    try     {     	//si esta seteado el id del socio quiere decir que se entro a editar 		if(isset($form_state['values']['id_socio']))		{			//recuperamos valores del socio			$tipo_socio_anterior = $form_state['values']['tipo_socio_anterior'];				$gf_anterior = (isset($form_state['values']['grupo_familiar_anterior']) ? $form_state['values']['grupo_familiar_anterior'] : 0);			$nro_socio = $form_state['values']['num_socio'];			$secuencia = $form_state['values']['secuencia'];			$id_socio = $form_state['values']['id_socio'];			$id_persona = $form_state['values']['id_persona'];			$mensaje2 = "";			db_update('io_persona')			->fields(array( 'tipo_doc'=>$tipo_doc,				'nro_doc'=>$nro_doc,				'apellidos'=>mb_strtoupper($apellidos, 'UTF-8'),				'nombres'=>mb_strtoupper($nombres, 'UTF-8'),				'fecha_nac'=>$fecha_nac,				'sexo'=>$sexo,				'direccion'=>mb_strtoupper($direccion, 'UTF-8'),				'localidad_id'=>$localidad_id,				'telefono_fijo'=>$prefijo_telefono_fijo.'-'.$telefono_fijo,				'celular_1'=>$celular_1,				'celular_2'=>$celular_2,				'comp_cel_1'=>$comp_cel_1,				'comp_cel_2'=>$comp_cel_2,				'email'=>$email,				'fecha_nac'=>$fecha_nac,				'usuario_mod'=>$uid,			))			->condition('id_persona',$id_persona,'=')			->execute();			db_update('io_socio')			->fields(array( 'fecha_ingreso'=>$fecha_ingreso,				'tipo_socio_id'=>$tipo_socio,				'forma_pago_id'=>($pago_nulo ? null : $forma_pago),				'cbu'=>($pago_nulo ? null : $cbu),				'vencimiento_dia'=>($pago_nulo ? null : $vencimiento_1),				'vencimiento_mes'=>($pago_nulo ? null : $vencimiento_2),				'fecha_ingreso'=>$fecha_ingreso,				'lugar_cobro'=>($pago_nulo ? null : $lugar_cobro),				'categoria_socio_id'=>$categoria,								'persona_id'=>$id_persona,				'personal_id'=>($pago_nulo ? null : $personal),				'estado_socio_id'=>$estado,				'usuario_mod'=>$uid,			))			->condition('id_socio',$id_socio,'=')			->execute();			//ver el tipo de socio cambio						if($tipo_socio_anterior != $tipo_socio)			{				//si es miembro de familia				if($tipo_socio_anterior == 2)				{					//quitamos a este miembro familia perteneciente del grupo familiar					db_delete('io_grupo_familiar_socio')					->condition('socio_id', $id_socio, '=')					->execute();				}//si es titular de familia se debe desarmar el grupo familiar				else if($tipo_socio_anterior == 3)				{					//quitamos a este adherente del grupo familiar					db_delete('io_grupo_familiar_socio')					->condition('socio_id', $id_socio, '=')					->execute();					//eliminamos el grupo familiar					db_delete('io_grupo_familiar')					->condition('nro_socio_titular', $nro_socio, '=')					->execute();				}				//si cambio a socio unico o titular de familia				if($tipo_socio == 1 || $tipo_socio == 3)				{					//vemos si el socio tiene ya numero de socio					$socio = get_socio_por_id($id_socio);					if(is_null($socio->nro_socio))					{						//si no tiene numero de socio se le asigna						$socio->nro_socio = get_next_num_socio();										$socio->secuencia = 0;						$mensaje2 = "\nNumero de socio asignado: ".$socio->nro_socio."/".$socio->secuencia;					}					else					{						//si tiene se le da la secuencia 0 y se mantiene el numero que tenia						$socio->secuencia = 0;					}					//si pasa a titular de familia se creara el grupo familiar y se lo agregara al mismo					if($tipo_socio == 3)					{						//creamos el grupo familiar						$id_grupo_familiar = db_insert('io_grupo_familiar')						->fields(array( 'nro_socio_titular'=>$nro_socio,							'tipo_grupo_familiar_id'=>$tipo_grupo_familiar,													'usuario_mod'=>$uid,							'usuario_alta'=>$uid,						))						->execute();							//agregamos el socio al grupo familiar						db_insert('io_grupo_familiar_socio')						->fields(array( 'socio_id'=>$id_socio,							'grupo_familiar_id'=>$id_grupo_familiar,							'parentezco'=>$parentezco,											'usuario_mod'=>$uid,							'usuario_alta'=>$uid,						))						->execute();					}					//se actualiza el socio, se le actualiza el nro de socio 					db_update('io_socio')					->fields(array( 'nro_socio'=>$socio->nro_socio,					'secuencia'=>$socio->secuencia,									'usuario_mod'=>$uid,					))					->condition('id_socio',$id_socio,'=')					->execute();				}				else if($tipo_socio ==2)	//si cambio a miembro de familia				{					//buscamos el titular que se selecciono					$socio_titular_familia_id = $form_state['values']['titular'];					$grupo_familiar_secuencia = get_next_num_secuencia($socio_titular_familia_id);						$secuencia = $grupo_familiar_secuencia->siguiente_sec;					$id_grupo_familiar = $grupo_familiar_secuencia->grupo_familiar_id;										//actualizamos el grupo familiar					db_insert('io_grupo_familiar_socio')					->fields(array( 'socio_id'=>$id_socio,						'grupo_familiar_id'=>$id_grupo_familiar,						'parentezco'=>$parentezco,										'usuario_mod'=>$uid,						'usuario_alta'=>$uid,					))					->execute();					//se actualiza solo la secuencia del socio					//no importe el numero de socio en este caso					db_update('io_socio')					->fields(array(					'secuencia'=>$secuencia,									'usuario_mod'=>$uid,					))					->condition('id_socio',$id_socio,'=')					->execute();				}			}			//si cambio el grupo familiar			if($gf_anterior != 0 && $gf_anterior != $tipo_grupo_familiar)			{				//buscamos el grupo familiar y lo actualizamos				$gf_socio = get_socio_grupo_familiar($id_socio);				db_update('io_grupo_familiar')				->fields(array(					'tipo_grupo_familiar_id'=>$tipo_grupo_familiar,											'usuario_mod'=>$uid,				))				->condition('id_grupo_familiar', $gf_socio->id_grupo_familiar)				->execute();			}			//si cambio el titular del este socio que es miembro de familia se cambia			if($tipo_socio==2 && 			  (isset($form_state['values']['titular_anterior']) &&			  ($form_state['values']['titular'] != $form_state['values']['titular_anterior'])))			{				//buscamos el titular nuevo que se selecciono				$socio_titular_familia_id = $form_state['values']['titular'];				//buscamos el grupo familiar con el numero de secuencia para el socio				$grupo_familiar_secuencia = get_next_num_secuencia($socio_titular_familia_id);					$secuencia = $grupo_familiar_secuencia->siguiente_sec;				$id_grupo_familiar = $grupo_familiar_secuencia->grupo_familiar_id;								//actualizamos el grupo familiar del socio				db_update('io_grupo_familiar_socio')				->fields(array('grupo_familiar_id'=>$id_grupo_familiar,					'parentezco'=>$parentezco,									'usuario_mod'=>$uid,					'usuario_alta'=>$uid,				))				->condition('socio_id',$id_socio,'=')				->execute();				//se actualiza solo la secuencia del socio				//no importe el numero de socio en este caso				db_update('io_socio')				->fields(array(				'secuencia'=>$secuencia,								'usuario_mod'=>$uid,				))				->condition('id_socio',$id_socio,'=')				->execute();			}			//si el tipo de socio es titular de familia y el tipo de estado es de BAJA se debe replicar la baja a todos los miembros del grupo			if($tipo_socio==3 && $tipo_estado==1)			{				replicar_baja_a_grupo_familiar($id_socio, $estado);			}			$mensaje="Se modificó el socio ".$apellidos." ".$nombres." Correctamente".$mensaje2;		}		else		{			//se esta dando de alta un nuevo socio			$id_persona = db_insert('io_persona')			->fields(array( 'tipo_doc'=>$tipo_doc,				'nro_doc'=>$nro_doc,				'apellidos'=>mb_strtoupper($apellidos, 'UTF-8'),				'nombres'=>mb_strtoupper($nombres, 'UTF-8'),				'fecha_nac'=>$fecha_nac,				'sexo'=>$sexo,				'direccion'=>mb_strtoupper($direccion, 'UTF-8'),				'localidad_id'=>$localidad_id,				'telefono_fijo'=>$prefijo_telefono_fijo.'-'.$telefono_fijo,				'celular_1'=>$celular_1,				'celular_2'=>$celular_2,				'comp_cel_1'=>$comp_cel_1,				'comp_cel_2'=>$comp_cel_2,				'email'=>$email,				'fecha_nac'=>$fecha_nac,				'usuario_mod'=>$uid,				'usuario_alta'=>$uid,			))			->execute();			$id_socio = db_insert('io_socio')			->fields(array( 				'nro_socio'=>0,				'fecha_ingreso'=>$fecha_ingreso,				'tipo_socio_id'=>$tipo_socio,				'forma_pago_id'=>($pago_nulo ? null : $forma_pago),				'cbu'=>($pago_nulo ? null : $cbu),				'vencimiento_dia'=>($pago_nulo ? null : $vencimiento_1),				'vencimiento_mes'=>($pago_nulo ? null : $vencimiento_2),				'fecha_ingreso'=>$fecha_ingreso,				'lugar_cobro'=>($pago_nulo ? null : $lugar_cobro),				'categoria_socio_id'=>$categoria,								'persona_id'=>$id_persona,				'personal_id'=>($pago_nulo ? null : $personal),				'estado_socio_id'=>$estado,				'usuario_mod'=>$uid,				'usuario_alta'=>$uid,			))			->execute();			$mensaje="Se dió de alta el socio ".$apellidos." ".$nombres." Correctamente";			//dependiendo el tipo de socio seleccionado la accion que tomamos con respecto al numero de socio y su secuencia			//si es socio unico o titular de familia			if($tipo_socio == 1 || $tipo_socio == 3)			{				$nro_socio = get_next_num_socio();								$secuencia = 0;				$mensaje = $mensaje."\nNumero de socio asignado: ".$nro_socio."/".$secuencia;								//como elsocio es unico o titular de familia se le genera una cuenta corriente				db_insert('io_cta_cte')					->fields(array( 'socio_id'=>$id_socio,									'usuario_mod'=>$uid,						'usuario_alta'=>$uid,					))					->execute();				//si es titular de familia se debe generar un nuevo grupo familiar				if($tipo_socio==3)				{					//creamos el grupo familiar					$id_grupo_familiar = db_insert('io_grupo_familiar')					->fields(array( 'nro_socio_titular'=>$nro_socio,						'tipo_grupo_familiar_id'=>$tipo_grupo_familiar,												'usuario_mod'=>$uid,						'usuario_alta'=>$uid,					))					->execute();						//agregamos el socio al grupo familiar					db_insert('io_grupo_familiar_socio')					->fields(array( 'socio_id'=>$id_socio,						'grupo_familiar_id'=>$id_grupo_familiar,						'parentezco'=>$parentezco,										'usuario_mod'=>$uid,						'usuario_alta'=>$uid,					))					->execute();				}			}			else if($tipo_socio ==2)			{				//buscamos el titular que se selecciono				$socio_titular_familia_id = $form_state['values']['titular'];				$grupo_familiar_secuencia = get_next_num_secuencia($socio_titular_familia_id);					$secuencia = $grupo_familiar_secuencia->siguiente_sec;				$id_grupo_familiar = $grupo_familiar_secuencia->grupo_familiar_id;				$nro_socio = null;				//actualizamos el grupo familiar				db_insert('io_grupo_familiar_socio')				->fields(array( 'socio_id'=>$id_socio,					'grupo_familiar_id'=>$id_grupo_familiar,					'parentezco'=>$parentezco,									'usuario_mod'=>$uid,					'usuario_alta'=>$uid,				))				->execute();			}			db_update('io_socio')			->fields(array( 'nro_socio'=>$nro_socio,			'secuencia'=>$secuencia,							'usuario_mod'=>$uid,			))			->condition('id_socio',$id_socio,'=')			->execute();			//TODO ACA HAY QUE REVSAR SI ESTA CHEQUEADO EL GENERAR CUOTA INGRESO			if($form_state['values']['cuota_inscripcion']==1){				//generamos una cuota para el mes, anio y concepto correspondiente				$mes = date('n');				$anio = date('Y');				$concepto_id = 1;				$resultado = generar_cuota($id_socio, $concepto_id, $mes, $anio);				//si se genero todo bien resultado sera true caso contrario sera false				if($resultado)				{					//agregamos al mensaje la informacion indicando que se genero la cuota inscripcion					$mensaje = $mensaje.'</br>SE GENERÓ LA CUOTA INSCRIPCIÓN DE FORMA CORRECTA';				}			}		}		drupal_set_message($mensaje);		$form_state['redirect'] = array('socios/datos_socio',array('query' => array('id'=>$id_socio)));  	} 	catch (Exception $e) {  		$transaction->rollback();  		watchdog_exception('socio', $e);  		drupal_set_message('<pre>'. print_r("Error en la trasaccion - Comunicarse con el proveedor de sistemas.".$e, TRUE) .'</pre>');	}	}function provincia_ajax_callback($form, &$form_state) {  return $form['socio']['socio_datos_personales']['provincia'];}function localidad_ajax_callback($form, &$form_state) {  return  $form['socio']['socio_datos_personales']['localidad'];}?>